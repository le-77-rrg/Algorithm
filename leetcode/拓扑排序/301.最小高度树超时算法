//ðŸ˜­
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        for(vector<vector<int>>::iterator it=edges.begin();it!=edges.end();it++){
            int v1=(*it)[0];
            int v2=(*it)[1];
            adj[v1].push_back(v2);
            adj[v2].push_back(v1);
        }
        vector<int>result;
        vector<int>h(n);
        for(int i=0;i<n;i++){
            int temp_h=0;
            vector<int>deep(n);
            deep[i]=0;
            vector<bool>visited(n,0);
            queue<int> q;
            q.push(i);
            while(!q.empty()){
                int v=q.front();
                q.pop();
                visited[v]=1;
                for(int j=0;j<adj[v].size();j++){
                    int u=adj[v][j];
                    if(!visited[u]){
                        q.push(u);
                        deep[u]=deep[v]+1;
                    }
                }
            }
            h[i]=*max_element(deep.begin(),deep.end());
        }
        int h_min=*min_element(h.begin(),h.end());
        for(int i=0;i<n;i++){
            if(h[i]==h_min){
                result.push_back(i);
            }
        }
        return result;
    }
};
