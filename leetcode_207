class Solution {
public:


bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
    vector<vector<int>> adj(numCourses);       // 邻接表
    vector<int> indegree(numCourses, 0);       // 入度数组
    
    // 构建邻接表和入度数组
    for (vector<vector<int>>::iterator it=prerequisites.begin();it!=prerequisites.end();it++) {
        int nowcus = (*it)[0];
        int precus = (*it)[1];
        adj[precus].push_back(nowcus);         // 先修课程指向当前课程
        indegree[nowcus]++;
    }
    
    queue<int> q;
    // 将入度为0的课程加入队列
    for (int i = 0; i < numCourses; i++) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }
    
    int count = 0;  // 记录已处理的课程数
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        count++;
        // 遍历所有依赖u的课程
        for (int i=0;i<adj[u].size();i++) {
            int v=adj[u][i];
            if (--indegree[v] == 0) {
                q.push(v);
            }
        }
    }
    
    return count == numCourses;
}
};
